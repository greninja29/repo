package com.examly.springapp.model;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonManagedReference;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;

@Entity
public class Playlist {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int playlistId;
    private String name;
    private String description;
    private int numofSongs;

    @OneToMany(mappedBy = "playlist",cascade = CascadeType.ALL)
    @JsonManagedReference
    private List<Song> songs;

    public Playlist() {
    }

    public Playlist(int playlistId, String name, String description, int numofSongs, List<Song> songs) {
        this.playlistId = playlistId;
        this.name = name;
        this.description = description;
        this.numofSongs = numofSongs;
        this.songs = songs;
    }

    public int getPlaylistId() {
        return playlistId;
    }

    public void setPlaylistId(int playlistId) {
        this.playlistId = playlistId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getNumofSongs() {
        return numofSongs;
    }

    public void setNumofSongs(int numofSongs) {
        this.numofSongs = numofSongs;
    }

    public List<Song> getSongs() {
        return songs;
    }

    public void setSongs(List<Song> songs) {
        this.songs = songs;
    }


}
package com.examly.springapp.model;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonManagedReference;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;

@Entity
public class Playlist {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int playlistId;
    private String name;
    private String description;
    private int numofSongs;

    @OneToMany(mappedBy = "playlist",cascade = CascadeType.ALL)
    @JsonManagedReference
    private List<Song> songs;

    public Playlist() {
    }

    public Playlist(int playlistId, String name, String description, int numofSongs, List<Song> songs) {
        this.playlistId = playlistId;
        this.name = name;
        this.description = description;
        this.numofSongs = numofSongs;
        this.songs = songs;
    }

    public int getPlaylistId() {
        return playlistId;
    }

    public void setPlaylistId(int playlistId) {
        this.playlistId = playlistId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getNumofSongs() {
        return numofSongs;
    }

    public void setNumofSongs(int numofSongs) {
        this.numofSongs = numofSongs;
    }

    public List<Song> getSongs() {
        return songs;
    }

    public void setSongs(List<Song> songs) {
        this.songs = songs;
    }

    
}
package com.examly.springapp.model;

import com.fasterxml.jackson.annotation.JsonBackReference;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;


@Entity
public class Song {
    @Id
    @GeneratedValue(strategy= GenerationType.IDENTITY)
    private int songId;

    private String title;
    private String artist;
    private String movieName;
    private String composer;
    
    @ManyToOne
    @JoinColumn(name="playlist_Id")
    @JsonBackReference
    private Playlist playlist;

    public Song() {
    }

    public Song(int songId, String title, String artist, String movieName, String composer, Playlist playlist) {
        this.songId = songId;
        this.title = title;
        this.artist = artist;
        this.movieName = movieName;
        this.composer = composer;
        this.playlist = playlist;
    }

    public int getSongId() {
        return songId;
    }

    public void setSongId(int songId) {
        this.songId = songId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getArtist() {
        return artist;
    }

    public void setArtist(String artist) {
        this.artist = artist;
    }

    public String getMovieName() {
        return movieName;
    }

    public void setMovieName(String movieName) {
        this.movieName = movieName;
    }

    public String getComposer() {
        return composer;
    }

    public void setComposer(String composer) {
        this.composer = composer;
    }

    public Playlist getPlaylist() {
        return playlist;
    }

    public void setPlaylist(Playlist playlist) {
        this.playlist = playlist;
    }

    

    
}
package com.examly.springapp.exception;

public class DuplicatePlaylistException extends RuntimeException {
    public DuplicatePlaylistException(String message){
        super(message);
    }

    public DuplicatePlaylistException(String message,Throwable cause){
        super(message,cause);
    }
}
package com.examly.springapp.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.examly.springapp.exception.DuplicatePlaylistException;
import com.examly.springapp.model.Playlist;
// import com.examly.springapp.service.PlaylistService;
import com.examly.springapp.service.PlaylistServiceImpl;

@RestController
@RequestMapping("/")
public class PlaylistController {
    @Autowired
    PlaylistServiceImpl playlistService;

    @PostMapping("/playlist")
    public ResponseEntity<?> createPlaylist(@RequestBody Playlist playlist){
        try{
            Playlist createdPlaylist= playlistService.savePlaylist(playlist);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdPlaylist);
        } catch(DuplicatePlaylistException e){
            String errormsg="Playlist with name " + playlist.getName() +" already exists!";
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errormsg);
        }
    }

    @GetMapping("/playlist/{playlistId}")
    public ResponseEntity<?> getPlaylistById(@PathVariable int playlistId){
        
            Optional<Playlist> playlist =playlistService.findPlaylist(playlistId);
            if(playlist.isEmpty()){
                return ResponseEntity.notFound().build();
            }
            else{
                return ResponseEntity.ok(playlist);
            }
        } 
}
package com.examly.springapp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.examly.springapp.model.Song;
// import com.examly.springapp.service.SongService;
import com.examly.springapp.service.SongServiceImpl;


@RestController
@RequestMapping("/")
public class SongController {
    @Autowired
    SongServiceImpl songService;

    @PostMapping("/song/{playlistId}/playlist")
    public ResponseEntity<Song> findSongByPlaylist(@RequestBody Song song,@PathVariable int playlistId){
        Song createdSong=songService.getSongPlaylist(song,playlistId);
        if(createdSong!=null){
            return ResponseEntity.status(HttpStatus.CREATED).body(createdSong);

        }
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    }

    @GetMapping("/song")
    public ResponseEntity<List<Song>> getAllSong(){
        List<Song> songs=songService.getAllSong();
        if(!songs.isEmpty())
            return ResponseEntity.ok(songService.getAllSong());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

    @GetMapping("/song/{artist}")
    public ResponseEntity<Song> getSongbyArtist(@PathVariable String artist){
        Song song=songService.getSongbyArtist(artist);
        if(song!=null)
            ResponseEntity.ok(song);
        return ResponseEntity.notFound().build();
    }

}
package com.examly.springapp.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.examly.springapp.model.Playlist;

@Repository
public interface PlaylistRepo extends JpaRepository<Playlist,Integer> {
    boolean existsByName(String name);
}
package com.examly.springapp.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.examly.springapp.model.Song;

@Repository
public interface SongRepo extends JpaRepository<Song,Integer>{
    Song findByPlaylist_PlaylistId(int playlistId);
    Song findByArtist(String artist);
}
package com.examly.springapp.service;

import java.util.Optional;

import com.examly.springapp.model.Playlist;

public interface PlaylistService {
    Playlist savePlaylist(Playlist playlist);
    Optional<Playlist> findPlaylist(int playlistId);
}
package com.examly.springapp.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.examly.springapp.exception.DuplicatePlaylistException;
import com.examly.springapp.model.Playlist;
import com.examly.springapp.repository.PlaylistRepo;

@Service
public class PlaylistServiceImpl implements PlaylistService {
    @Autowired
    private PlaylistRepo playlistRepo;

    @Override
    public Playlist savePlaylist(Playlist playlist){
        if(playlistRepo.existsByName(playlist.getName())){
            throw new DuplicatePlaylistException("Playlist with name " +playlist.getName()+" alredy exists.");
        }
        return playlistRepo.save(playlist);
    }

    @Override
    public Optional<Playlist> findPlaylist(int playlistId){
        return playlistRepo.findById(playlistId);
    }
}
package com.examly.springapp.service;

import java.util.List;

import com.examly.springapp.model.Song;

public interface SongService {
    List<Song> getAllSong();
    Song getSongPlaylist(Song song,int playlistId);
    Song getSongbyArtist(String artist);
    boolean deleteSongById(int songId);
}
package com.examly.springapp.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.examly.springapp.model.Playlist;
import com.examly.springapp.model.Song;
import com.examly.springapp.repository.PlaylistRepo;
import com.examly.springapp.repository.SongRepo;

@Service
public class SongServiceImpl implements SongService {
    @Autowired
    SongRepo songRepo;

    @Autowired
    PlaylistRepo playlistRepo;

    @Override
    public List<Song> getAllSong(){
        return songRepo.findAll();
    }

    @Override
    public Song getSongPlaylist(Song song,int playlistId){
        Playlist playlist=playlistRepo.getById(playlistId);
        song.setPlaylist(playlist);
        return songRepo.save(song);
    }

    @Override
    public Song getSongbyArtist(String artist){
        return songRepo.findByArtist(artist);
    }
    @Override
    public boolean deleteSongById(int songId){
        Optional<Song> song=songRepo.findById(songId);
        if(song.isPresent()){
            songRepo.deleteById(songId);
            return true;
        }
        return false;
    }
}
