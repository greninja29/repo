package com.examly.springapp.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.examly.springapp.exception.DuplicatePlaylistException;
import com.examly.springapp.model.Playlist;
import com.examly.springapp.service.PlaylistService;

@RestController
@RequestMapping("/playlist")
public class PlaylistController {
    @Autowired
    private PlaylistService playlistService;

    @PostMapping
    public ResponseEntity<?> createPlaylist(@RequestBody Playlist playlist){
        try{
            Playlist createdPlaylist = playlistService.createPlaylist(playlist);
            return new ResponseEntity<>(createdPlaylist,HttpStatus.CREATED);
        } catch (DuplicatePlaylistException e){
            return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/{playlistId}")
    public ResponseEntity<Playlist> getPlaylistById(@PathVariable int playlistId){
        Playlist playlist = playlistService.getPlaylistById(playlistId);
        return playlist!=null?new ResponseEntity<>(playlist,HttpStatus.OK) : new ResponseEntity<>(null,HttpStatus.NOT_FOUND);
    }
}


package com.examly.springapp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.examly.springapp.model.Song;
import com.examly.springapp.service.SongService;

@RestController
@RequestMapping("/song")
public class SongController {
   @Autowired
   private SongService songService;
   
   @PostMapping("/{playlistId}/playlist")
   public ResponseEntity<Song> addSongToPlaylist(@PathVariable int playlistId,@RequestBody Song song){
        try{
            Song createdSong = songService.addSongToPlaylist(playlistId, song);
            return new ResponseEntity<>(createdSong,HttpStatus.CREATED);
        } catch(RuntimeException e){
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
   }

   @GetMapping
   public ResponseEntity<List<Song>> getAllSongs(){
    List<Song> songs = songService.getAllSongs();
    return new ResponseEntity<>(songs,HttpStatus.OK);
   }
   @GetMapping("/{artist}")
   public ResponseEntity<List<Song>> getSongsByArtist(@PathVariable String artist){
    List<Song> songs = songService.getSongsByArtist(artist);
    return songs.isEmpty()? new ResponseEntity<>(null,HttpStatus.NOT_FOUND): new ResponseEntity<>(songs,HttpStatus.OK);
   }

   @DeleteMapping("/{songId}")
   public ResponseEntity<String> deleteSong(@PathVariable int songId){
    songService.deleteSong(songId);
    return new ResponseEntity<>("Song "+songId+" deleted successfully",HttpStatus.OK);
   }
}


package com.examly.springapp.exception;

public class DuplicatePlaylistException extends RuntimeException {
    public DuplicatePlaylistException(String message){
        super(message);
    }    
}



package com.examly.springapp.model;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonManagedReference;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;

@Entity
public class Playlist {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int playlistId;
    private String name;
    private String description;
    private int numOfSongs;
    
    @OneToMany(mappedBy = "playlist",cascade = CascadeType.ALL)
    @JsonManagedReference
    private List<Song> songs;
    
    public Playlist(){}

    public Playlist(int playlistId, String name, String description, int numOfSongs, List<Song> songs) {
        this.playlistId = playlistId;
        this.name = name;
        this.description = description;
        this.numOfSongs = numOfSongs;
        this.songs = songs;
    }

    public int getPlaylistId() {
        return playlistId;
    }

    public void setPlaylistId(int playlistId) {
        this.playlistId = playlistId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getNumOfSongs() {
        return numOfSongs;
    }

    public void setNumOfSongs(int numOfSongs) {
        this.numOfSongs = numOfSongs;
    }

    public List<Song> getSongs() {
        return songs;
    }

    public void setSongs(List<Song> songs) {
        this.songs = songs;
    }
    
}



package com.examly.springapp.model;

import com.fasterxml.jackson.annotation.JsonBackReference;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;

@Entity
public class Song {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int songId;
    private String title;
    private String artist;
    private String movieName;
    private String composer;
    @ManyToOne
    @JoinColumn(name="playlist_id")
    @JsonBackReference
    private Playlist playlist;

    public Song(){}

    public Song(int songId, String title, String artist, String movieName, String composer, Playlist playlist) {
        this.songId = songId;
        this.title = title;
        this.artist = artist;
        this.movieName = movieName;
        this.composer = composer;
        this.playlist = playlist;
    }

    public int getSongId() {
        return songId;
    }

    public void setSongId(int songId) {
        this.songId = songId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getArtist() {
        return artist;
    }

    public void setArtist(String artist) {
        this.artist = artist;
    }

    public String getMovieName() {
        return movieName;
    }

    public void setMovieName(String movieName) {
        this.movieName = movieName;
    }

    public String getComposer() {
        return composer;
    }

    public void setComposer(String composer) {
        this.composer = composer;
    }

    public Playlist getPlaylist() {
        return playlist;
    }

    public void setPlaylist(Playlist playlist) {
        this.playlist = playlist;
    }
    
}



package com.examly.springapp.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.examly.springapp.model.Playlist;

@Repository
public interface PlaylistRepo extends JpaRepository<Playlist,Integer>{
    Playlist findByName(String name);
}



package com.examly.springapp.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.examly.springapp.model.Song;

@Repository
public interface SongRepo extends JpaRepository<Song,Integer>{
    @Query("SELECT s FROM Song s WHERE s.artist = ?1")
    List<Song> findByArtist(String artist);    
}


package com.examly.springapp.service;

import com.examly.springapp.model.Playlist;

public interface PlaylistService {
    Playlist createPlaylist(Playlist playlist);
    Playlist getPlaylistById(int id);
}



package com.examly.springapp.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.examly.springapp.exception.DuplicatePlaylistException;
import com.examly.springapp.model.Playlist;
import com.examly.springapp.repository.PlaylistRepo;

@Service
public class PlaylistServiceImpl implements PlaylistService {
    @Autowired
    private PlaylistRepo playlistRepo;

    @Override
    public Playlist createPlaylist(Playlist playlist){
        if(playlistRepo.findByName(playlist.getName())!=null){
            throw new DuplicatePlaylistException("Playlist with name "+playlist.getName()+" already exists!");
        }
        return playlistRepo.save(playlist);
    }

    @Override
    public Playlist getPlaylistById(int id){
        return playlistRepo.findById(id).orElse(null);
    }
}


package com.examly.springapp.service;

import java.util.List;

import com.examly.springapp.model.Song;

public interface SongService {
    Song addSongToPlaylist(int playlistId,Song song);
    List<Song> getAllSongs();
    List<Song> getSongsByArtist(String artist);
    void deleteSong(int songId);
}


package com.examly.springapp.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.examly.springapp.model.Playlist;
import com.examly.springapp.model.Song;
import com.examly.springapp.repository.PlaylistRepo;
import com.examly.springapp.repository.SongRepo;

@Service
public class SongServiceImpl implements SongService{
    @Autowired
    private SongRepo songRepo;

    @Autowired
    private PlaylistRepo playlistRepo;

    @Override
    public Song addSongToPlaylist(int playlistId,Song song){
        Playlist playlist = playlistRepo.findById(playlistId).orElse(null);
        if(playlist!=null){
            song.setPlaylist(playlist);
            return songRepo.save(song);
        } 
        return null;
    }

    @Override
    public List<Song> getAllSongs(){
        return songRepo.findAll();
    }

    @Override
    public List<Song> getSongsByArtist(String artist){
        return songRepo.findByArtist(artist);
    }

    @Override
    public void deleteSong(int songId){
        songRepo.deleteById(songId);
    }
}


